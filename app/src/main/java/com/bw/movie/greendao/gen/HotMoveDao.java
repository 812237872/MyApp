package com.bw.movie.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.bean.Dao.HotMove;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOT_MOVE".
*/
public class HotMoveDao extends AbstractDao<HotMove, Void> {

    public static final String TABLENAME = "HOT_MOVE";

    /**
     * Properties of entity HotMove.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FollowMovie = new Property(0, int.class, "followMovie", false, "FOLLOW_MOVIE");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Rank = new Property(2, int.class, "rank", false, "RANK");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Summary = new Property(5, String.class, "summary", false, "SUMMARY");
        public final static Property ReleaseTimeShow = new Property(6, String.class, "releaseTimeShow", false, "RELEASE_TIME_SHOW");
    }


    public HotMoveDao(DaoConfig config) {
        super(config);
    }
    
    public HotMoveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOT_MOVE\" (" + //
                "\"FOLLOW_MOVIE\" INTEGER NOT NULL ," + // 0: followMovie
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"RANK\" INTEGER NOT NULL ," + // 2: rank
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"NAME\" TEXT," + // 4: name
                "\"SUMMARY\" TEXT," + // 5: summary
                "\"RELEASE_TIME_SHOW\" TEXT);"); // 6: releaseTimeShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOT_MOVE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HotMove entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFollowMovie());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getRank());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        String releaseTimeShow = entity.getReleaseTimeShow();
        if (releaseTimeShow != null) {
            stmt.bindString(7, releaseTimeShow);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HotMove entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFollowMovie());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getRank());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        String releaseTimeShow = entity.getReleaseTimeShow();
        if (releaseTimeShow != null) {
            stmt.bindString(7, releaseTimeShow);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HotMove readEntity(Cursor cursor, int offset) {
        HotMove entity = new HotMove( //
            cursor.getInt(offset + 0), // followMovie
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // rank
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // summary
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // releaseTimeShow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HotMove entity, int offset) {
        entity.setFollowMovie(cursor.getInt(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setRank(cursor.getInt(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSummary(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReleaseTimeShow(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HotMove entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HotMove entity) {
        return null;
    }

    @Override
    public boolean hasKey(HotMove entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
